#!/bin/bash

# Fonctions

function PrintHelp ()
{
	echo
	echo "Usage : morning [OPTION]..."
	echo ----------------------------
	echo
	echo "	-n				   Used to write a message to print to tomorrow."
	echo "						 Can be used with a positive integer to"
	echo "						 report the message by the number of days"
	echo
	echo "		--help		   Display this help and exit"
	echo
}

function MorningRoutine () 
{
	echo ----------------------------
	date
	echo ----------------------------
	if [ "${isportable}" = true ]; then
		echo Portable mode
	fi
	
	if [ -s "$commandsfile" ]; then

		echo
		echo Executing commands
		echo ------------------

		if [ -x "$commandsfile" ]; then
			
			bash $commandsfile

			# Execute user defined commands
			# will have to implement way to execute said script and to edit it	
		else
			echo "ERROR : $commandsfile is not executable."
		fi
	fi
	
	if [ -s "$remindersfile" ]; then

		echo 
		echo Reminders
		echo -------------------

		if [ -r "$remindersfile" ]; then
			
			echo $(cat $remindersfile)
			# Print user defined daily reminders
			# will have to implement a way to edit reminders
		else
			echo "ERROR : $remindersfile cannot be read."
		fi
	fi

	filename="${pathtofiles}/Morning_${year}_${month}_${day}.txt"

	echo
	echo Message for you
	echo ---------------

	# Print message for the day

	if [ -s "$filename" ]; then
		if [ -r "$filename" ]; then
			cat "$filename"
			echo
		else
			echo "ERROR : $filename cannot be read."
		fi
	else
		echo No messages to display
	fi
}

function CreateFile ()
{
	# Creating the name of the file
	textarray=()

	# Add number of days requested or the default of one
	if [ $# -eq 1 ]; then
		day=$(($day+$1))
	else
		day=$(($day+1))
	fi

	filename="${pathtofiles}/Morning_${year}_${month}_${day}.txt"

	# Read text
	read -p $'Enter text (enter eol to end): \n' text
	while [ "$text" != "eol" ]
	do
		textarray+=("$text")
		read text
	done

		# If array is empty do not create file
	if [ "${#textarray[@]}" -ne 0 ]; then
	
		# Write text to array
		for i in "${textarray[@]}"
		do
			echo $i >> "$filename"
		done

	fi
}

function CleanMessages ()
{
	# Will have to update to work with new paths
	listMornings=($(ls -1 ${pathtofiles} | egrep 'Morning_[0-9]{4}_[0-9]{2}_[0-9]{2}.txt'))

	echo
	
	for file in "${listMornings[@]}"
	do

		fileyear=$(echo "$file" | cut -d '_' -f2)
		filemonth=$(echo "$file" | cut -d '_' -f3)
		fileday=$(echo "$file" | cut -d '_' -f4 | cut -d '.' -f1)
		
		# Check if message file is older than the current date
		if [ "$fileyear" -lt "$year" ]; then
			# Delete file
			rm "${pathtofiles}/${file}"

		elif [ "$fileyear" -eq "$year" ]; then
 
			if [ "$filemonth" -lt "$month" ]; then
				# Delete file
				rm "${pathtofiles}/${file}"

			elif [ "$filemonth" -eq "$month" ]; then

				if [ "$fileday" -lt "$day" ]; then
					# Delete file
					rm "${pathtofiles}/${file}"
				fi
			fi
		fi

	done
}

function PathGathering ()
{
	# Script should always be executed from /usr/bin from the PATH
	# if it is not, it assumes it is in portable mode and will take all of its files from the executing folder

	pathtoconfig="${HOME}/morning/morning.conf"
	pathtofiles="${HOME}/morning"

	# Does not work on OSX
	pathtoscript1=$(dirname `which $0`)
	# Should work on OSX found at http://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
	pathtoscript2="$( cd "$(dirname "$0")" ; pwd -P )"
	
	if [ "$pathtoscript1" != "$pathtoscript2" ]; then
		echo Path to script is unclear please contact owner at PUT GITHUB LINK
		echo Please add this information to your bugtrack with your OS
		echo ----------------------------------------------------------------
		echo "pathtoscript1 = $pathtoscript1"
		echo "pathtoscript2 = $pathtoscript2"
		echo ----------------------------------------------------------------
	else	
		pathtoscript="$pathtoscript2"

		if [ "$pathtoscript" != '/usr/bin' ]; then
			isportable=true
			pathtofiles=""
			pathtoconfig="morning.conf"
			remindersfile="reminders.txt"
			commandsfile="commands"
		else
			isportable=false
			remindersfile="${pathtofiles}/reminders.txt"
			commandsfile="${pathtofiles}/commands"
		fi
	fi
}

function SetDate ()
{	
	day=$(date +%d)
	month=$(date +%m)
	year=$(date +%Y)
}

# Initialisation

PathGathering
SetDate

# Arguments parsing

if [ $# -eq 0 ]; then
	# Run daily commands
	MorningRoutine
	# Clean message folder of older messages
	CleanMessages
else
	if [ $# -gt 2 ]; then
		echo
		echo "Too many arguments : $#"
		PrintHelp
		exit 128
	fi

	if [ "$1" = "--help" ]; then
			PrintHelp
	fi

	# Writing message if parameter -n

	if [ "$1" = "-n" ]; then

		if [ $# -eq 1 ]; then
			CreateFile
		fi

		# If there is a number of days skip ahead by that much
		if [ $# -eq 2 ]; then

			# Test to see if number is a positive integer
			if [[ $2 =~ ^[+]?[0-9]+$ ]]; then
				CreateFile $2
			else
				echo Invalid parameter for -n option
				PrintHelp
			fi
		fi
	fi
fi
