#!/bin/bash

# Fonctions

function PrintHelp ()
{
	echo
	echo "Usage : morning [OPTION]..."
	echo ----------------------------
	echo
	echo "  -n                 Used to write a message to print to tomorrow."
	echo "                       Can be used with a positive integer to"
	echo "                       report the message by the number of days."
	echo "  -w                 Used as a shortcut to 'morning -n 3' to be used"
	echo "                       report the message by the number of days."
	echo "  -p                 Display past messages by the number of days given."
	echo "                       Messages have to be in history time interval."
	echo "                       (config variable historytime >= days given)"
	echo "  -r                 Open reminders file in user's default editor."
	echo "  -c                 Open commands file in user's default editor."
	echo
	echo "  -h,--help          Display this help and exit."
	echo
}

function MorningRoutine () 
{
	echo ----------------------------
	date
	echo ----------------------------
	if [ "${isportable}" = true ]; then
		echo Portable mode
	fi
	
	if [ -s "$commandsfile" ]; then

		echo
		echo Executing commands
		echo ------------------
		if [ -f "$commandsfile" ]; then
			if [ -x "$commandsfile" ]; then

				bash $commandsfile
				# Execute user defined commands
				# will have to implement way to execute said script and to edit it	
			else
				echo "ERROR : $commandsfile is not executable."
			fi
		else
			echo "ERROR : $commandsfile is not a regular file."
			echo "Is the path to commandsfile a folder ?"
			echo "Please use complete path with the file name at the end."
		fi
	fi
	
	if [ -s "$remindersfile" ]; then

		echo 
		echo Reminders
		echo -------------------
		if [ -f "$remindersfile" ];then
			if [ -r "$remindersfile" ]; then
				
				cat $remindersfile
				# Print user defined daily reminders
				# will have to implement a way to edit reminders
			else
				echo "ERROR : $remindersfile cannot be read."
			fi
		else
			echo "ERROR : $remindersfile is not a regular file."
			echo "Is the path to remindersfile a folder ?"
			echo "Please use complete path with the file name at the end."
		fi
	fi

	DisplayMessage $year $month $day
}

function DisplayMessage ()
{
	local messageyear
	local messagemonth
	local messageday

	if [ $# -eq 3 ]; then

		messageyear=$1
		messagemonth=$2
		messageday=$3

		filename="${pathtofiles}Morning_${messageyear}_${messagemonth}_${messageday}.txt"

		echo
		echo Message for you
		echo ---------------
		
		# Print message for the day

		if [ -s "$filename" ]; then
			if [ -r "$filename" ]; then
				cat "$filename"
			else
				echo "ERROR : $filename cannot be read."
			fi
		else
			echo No messages to display
		fi

	else
		echo "ERROR : DisplayMessage was passed the wrong number of arguments"
	fi
}

function DisplayPastMessage ()
{
	local messageyear
	local messagemonth
	local messageday
		
	if [ $# -eq 1 ]; then
    		messageday=$(date --date="$1 day ago" +%d)
    		messagemonth=$(date --date="$1 day ago" +%m)
    		messageyear=$(date --date="$1 day ago" +%Y)

		DisplayMessage $messageyear $messagemonth $messageday	
		echo "(${messageyear}/${messagemonth}/${messageday})"
	else
		echo "ERROR : DisplayPastMessage was passed the wrong number of arguments"
	fi
}

function CreateFile ()
{
	# Creating the name of the file
	textarray=()
	local nextday
	local nextmonth
	local nextyear

	# Add number of days requested or the default of one
	if [ $# -eq 1 ]; then
    		nextday=$(date --date="$1 day" +%d)
    		nextmonth=$(date --date="$1 day" +%m)
    		nextyear=$(date --date="$1 day" +%Y)
	else
    		nextday=$(date --date="1 day" +%d)
    		nextmonth=$(date --date="1 day" +%m)
    		nextyear=$(date --date="1 day" +%Y)
	fi

	filename="${pathtofiles}Morning_${nextyear}_${nextmonth}_${nextday}.txt"

	# Read text
	read -p $'Enter text (enter eol to end): \n' text
	while [ "$text" != "eol" ] && [ "$text" != "EOL" ]
	do
		textarray+=("$text")
		read text
	done

	# If array is empty do not create file
	if [ "${#textarray[@]}" -ne 0 ]; then
	
		# Write text to array
		for i in "${textarray[@]}"
		do
			echo $i >> "$filename"
		done
	fi
}

function CleanMessages ()
{
	local listMornings
	local deleteday
	local deletemonth
	local deleteyear
	local skipdelete=false
	
	# Possible error checks
	if [ -d "$pathtofiles" ]; then

		listMornings=($(ls -1 ${pathtofiles} | grep 'Morning_[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9].txt'))
		
		# Check if historytime was set in config
		if [ -z ${historytime+x} ]; then
    			deleteday=$day
    			deletemonth=$month
    			deleteyear=$year
		else
			# Check if historytime is a number
			if [ "$historytime" -eq "$historytime" ] 2>/dev/null; then
    				deleteday=$(date --date="$historytime day ago" +%d)
    				deletemonth=$(date --date="$historytime day ago" +%m)
    				deleteyear=$(date --date="$historytime day ago" +%Y)
			else
				skipdelete=true
				echo "CONFIG ERROR : historytime is not a valid integer."
				echo "No files will be deleted until proper value is set."
			fi
		fi
	else
		skipdelete=true
		echo "ERROR : Could not delete older messages because $pathtofiles does not exist."
	fi
	
	# Delete files that are too old
	if [ "$skipdelete" = false ]; then
		for file in "${listMornings[@]}"
		do
			fileyear=$(echo "$file" | cut -d '_' -f2)
			filemonth=$(echo "$file" | cut -d '_' -f3)
			fileday=$(echo "$file" | cut -d '_' -f4 | cut -d '.' -f1)
		
			# Check if message file is older than the current date
			if [ "$fileyear" -lt "$deleteyear" ]; then
				# Delete file
				rm "${pathtofiles}${file}"

			elif [ "$fileyear" -eq "$deleteyear" ]; then
 
				if [ "$filemonth" -lt "$deletemonth" ]; then
					# Delete file
					rm "${pathtofiles}${file}"

				elif [ "$filemonth" -eq "$deletemonth" ]; then
	
					if [ "$fileday" -lt "$deleteday" ]; then
						# Delete file
						rm "${pathtofiles}${file}"
					fi
				fi
			fi

		done
	fi
}

function PathChecking ()
{
	# Paths should be loaded but put defaults if not
	if [ "$pathtofiles" == "filepathnotset" ]; then
		if [ "$isportable" = true ]; then
			pathtofiles="./"
		else
			pathtofiles="${HOME}/.morning/"	
		fi
	fi

	if [ "$remindersfile" == "filepathnotset" ]; then
		if [ "$isportable" = true ]; then
			remindersfile="reminders.txt"
		else
			remindersfile="${pathtofiles}reminders.txt"
		fi
	fi

	if [ "$commandsfile" == "filepathnotset" ]; then
		if [ "$isportable" = true ]; then
			commandsfile="commands"
		else
			commandsfile="${pathtofiles}commands"
		fi
	fi

	# Need to confirm that paths are absolute in installed mode and relative in portable mode
	if [ "$isportable" = true ]; then
		if [[ $pathtofiles =~ ^/.* ]] || [[ $remindersfile =~ ^/.* ]] || [[ $commandsfile =~ ^/.* ]]; then
			echo
			echo "CONFIG ERROR : pathtofiles, remindersfile and commandsfile should be relative paths to be portable"
			echo
		fi
	else
		if ! [[ $pathtofiles =~ ^/.* ]] || ! [[ $remindersfile =~ ^/.* ]] || ! [[ $commandsfile =~ ^/.* ]]; then
			echo
			echo "CONFIG ERROR : pathtofiles, remindersfile and commandsfile should be absolute paths when installed"
			echo
		fi	
	fi

	# Will also need to alter the paths if the name of the file is not given and if there is or not a / at the end
}

function CreateConfig ()
{
	touch "$pathtoconfig"

	if [ -e "$pathtoconfig" ]; then
		if [ -w "$pathtoconfig" ]; then
			# This will push default values for all paths
			echo '# This is the morning command configuration file' >> "$pathtoconfig"
			echo >> "$pathtoconfig"
			echo 'pathtofiles="filepathnotset"' >> "$pathtoconfig"
			echo 'remindersfile="filepathnotset"' >> "$pathtoconfig"
			echo 'commandsfile="filepathnotset"' >> "$pathtoconfig"
			echo 'historytime=10' >> "$pathtoconfig"
			return 0
		else
			echo "ERROR : could not write default config in $pathtoconfig"
			return 1
		fi
	else
		echo "ERROR : could not create $pathtoconfig"
		return 1
	fi
}

function ConfigLoading ()
{
	# Should we put the config in /etc ? in advanced bash script it says it is the repertory for configs

	# Set path to config
	if [ "$isportable" = true ]; then
		pathtoconfig="morning.conf"
	else
		pathtoconfig="${HOME}/.morning/morning.conf"
	fi

	# First test if config file is present
	if [ -e "$pathtoconfig" ]; then
		if [ -r "$pathtoconfig" ]; then
			source "$pathtoconfig"
		else
			echo "ERROR : $pathtoconfig cannot be read."
		fi
	else
		# Try to create the config
		CreateConfig

		if [ "$?" -eq 0 ]; then
			source "$pathtoconfig"
		fi
	fi
}

function CreateHomeFolder ()
{
	# Function used when no files are there to set up
	local pathtonewfiles="${HOME}/.morning/"

	mkdir "${HOME}/.morning"
	
	# Create reminders exemple file
	touch "${pathtonewfiles}reminders.txt"
	echo 'Here you can put text reminders to be output daily!' >> "${pathtonewfiles}reminders.txt"
	# After the feature is added, put a line on how to edit the file

	# Create commands exemple file
	touch "${pathtonewfiles}commands"
	echo '#!/bin/bash' >> "${pathtonewfiles}commands"
	echo >> "${pathtonewfiles}commands"
	echo 'echo Here you can put commands to be executed each morning' >> "${pathtonewfiles}commands"
	# After the feature is added, put a line on how to edit the file
	chmod +x "${pathtonewfiles}commands"
}

function LookForHome ()
{
	# Sets base paths
	local homefolder="${HOME}/.morning"
	pathtofiles="filepathnotset"
	remindersfile="filepathnotset"
	commandsfile="filepathnotset"

	# Check if home folder exists (meaning first time use)
	if [ "$isportable" = false ]; then
		if ! [ -d "$homefolder" ]; then
			CreateHomeFolder
		fi
	fi
}

InstalledOrPortable ()
{
	# Script should always be executed from /usr/bin from the PATH
	# if it is not, it assumes it is in portable mode and will take all of its files from the executing folder
	
	# Should work for all OS found at http://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
	pathtoscript="$( cd "$(dirname "$0")" ; pwd -P )"
	
	if [ "$pathtoscript" != '/usr/bin' ]; then
		isportable=true
	else
		isportable=false
	fi
}

function OpenEditor ()
{
	if command -v vim >/dev/null 2>&1; then
		"${EDITOR:-vim}" $1
	else
		if command -v nano >/dev/null 2>&1; then
			"${EDITOR:-nano}" $1
		else
			if command -v vi >/dev/null 2>&1; then
				"${EDITOR:-vi}" $1
			fi
		fi
	fi	
}

function SetDate ()
{	
	day=$(date +%d)
	month=$(date +%m)
	year=$(date +%Y)
}

# Initialisation

SetDate
InstalledOrPortable
LookForHome
ConfigLoading
PathChecking

# Arguments parsing

if [ $# -eq 0 ]; then
	# Run daily commands
	MorningRoutine
	# Clean message folder of older messages
	CleanMessages
else
	if [ $# -gt 2 ]; then
		echo
		echo "Too many arguments : $#"
		PrintHelp
		exit 128
	fi

	# Writing message if parameter -n
	if [ "$1" = "-n" ]; then

		if [ $# -eq 1 ]; then
			CreateFile
		fi

		# If there is a number of days skip ahead by that much
		if [ $# -eq 2 ]; then

			# Test to see if number is a positive integer
			if [[ $2 =~ ^[+]?[0-9]+$ ]]; then
				CreateFile $2
			else
				echo "Invalid parameter for -n option"
				PrintHelp
			fi
		fi
	fi

	# Writting message for the weekend
	if [ "$1" = "-w" ]; then

		if [ $# -lt 2 ]; then
			CreateFile 3
		else
			echo "Invalid parameter for -w option"
			PrintHelp
		fi
	fi

	# Looking for past messages in history
	if [ "$1" = "-p" ]; then

		# Test to see if number is a positive integer
        	if [[ $2 =~ ^[+]?[0-9]+$ ]]; then
            		DisplayPastMessage $2
        	else
            		echo "Invalid parameter for -p option"
			echo "Use positive integers as number of days"
            		PrintHelp
        	fi
	fi

	# Edit commands file
	if [ "$1" = "-c" ]; then
		OpenEditor $commandsfile
	fi

	# Edit reminders file
	if [ "$1" = "-r" ]; then
		OpenEditor $remindersfile
	fi

	# Print help section if asked
	if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
		PrintHelp
	fi

	# The help section should print if nothing was done TODO
fi

echo
